{"version":3,"sources":["firebase.js","Header.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Header","date","moment","format","className","Footer","href","App","handleChange","e","setState","target","name","value","handleClick","preventDefault","rep","document","getElementById","note","button","querySelector","state","repList","noteInput","placeholder","style","backgroundColor","dbRef","database","ref","submission","push","minimizeNote","parentNode","noteDetails","nextSibling","matches","classList","toggle","removeNote","noteKey","child","remove","notes","deleteNotes","on","response","newState","data","val","key","reverse","action","htmlFor","type","id","onChange","this","onClick","map","icon","faMinus","faTimes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a49277a9.chunk.js","sourcesContent":["// firebase.js\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyCSuCFIe2ch2hRdRIHk3tQYh0MzQBJx-8A\",\r\n    authDomain: \"music-notes-app-3a127.firebaseapp.com\",\r\n    databaseURL: \"https://music-notes-app-3a127.firebaseio.com\",\r\n    projectId: \"music-notes-app-3a127\",\r\n    storageBucket: \"music-notes-app-3a127.appspot.com\",\r\n    messagingSenderId: \"36567821030\",\r\n    appId: \"1:36567821030:web:f97f5aec5248fdefcd6927\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","import React from 'react';\r\nimport moment from 'moment';\r\n\r\nconst Header = () => {\r\n    const date = moment().format('dddd MMMM Do YYYY');\r\n\r\n    return (\r\n        <header>\r\n            <div className=\"wrapper\">\r\n                <div className=\"headerContainer\">\r\n                    <h1>Music Notes <span>♫</span></h1>\r\n                    <p>{date}</p>\r\n                </div>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <div className=\"wrapper\">\r\n                <div className=\"footerContainer\">\r\n                    <p>&copy; 2020 Adam Batstone |</p>\r\n                    <p><a href=\"https://junocollege.com/\" className=\"junoFooterLink\">| Created at Juno College</a></p>\r\n                </div>\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer","import React, { Component } from 'react';\nimport firebase from './firebase.js';\nimport Header from './Header.js';\nimport Footer from './Footer.js';\nimport moment from 'moment';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTimes } from '@fortawesome/free-solid-svg-icons'\nimport { faMinus } from '@fortawesome/free-solid-svg-icons'\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      notes: [],\n      repList: '',\n      noteInput: '',\n      deleteNotes: false\n    }\n  }\n\n  componentDidMount() {\n    // create a Firebase reference\n    const dbRef = firebase.database().ref();\n    // listen to the value change and use `response` as the db value\n    dbRef.on('value', (response) => {\n\n      const newState = [];\n      const data = response.val();\n\n      for (const key in data) {\n        newState.push({\n          key: key,\n          note: data[key].note,\n          rep: data[key].rep,\n          date: data[key].date\n        });\n      }\n\n      // reversing the array so the notes appear in chronological order\n      const reverse = newState.reverse()\n\n      // update our React state for notes\n      this.setState({\n        notes: reverse\n      });\n    });\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      [e.target.name]: e.target.value\n    })\n  }\n\n  handleClick = (e) => {\n    e.preventDefault();\n\n    const rep = document.getElementById('repList')\n    const note = document.getElementById('newNote')\n    const button = document.querySelector('.submitBtn')\n\n    if (this.state.repList === '' || this.state.noteInput === '') {\n      rep.placeholder = 'Please enter repertoire details'\n      note.placeholder = 'Please enter rehearsal notes'\n      button.style.backgroundColor = 'red';\n    } else {\n      rep.placeholder = 'Enter repertoire details'\n      note.placeholder = 'Enter rehearsal notes'\n      button.style.backgroundColor = '#4a5859'\n      // Firebase call\n      const dbRef = firebase.database().ref();\n\n      // Getting a timestamp using the moment.js library\n      const date = moment().format('MMM Do LT');\n\n      // The object that is pushed to firebase\n      const submission = {\n        rep: this.state.repList,\n        note: this.state.noteInput,\n        date: date\n      }\n\n      dbRef.push(submission);\n\n      // Reset the state\n      this.setState({\n        repList: '',\n        noteInput: '',\n      });\n    }\n  }\n\n  minimizeNote = (e) => {\n    // storing the target of the click event\n    const button = e.target\n    const note = button.parentNode.parentNode\n    const noteDetails = button.parentNode.nextSibling\n\n    // Changing the css of the li and the note details containers\n    if (e.target.matches('.min')) {\n      note.classList.toggle('border')\n      noteDetails.classList.toggle('noteDetails')\n    }\n  }\n\n  // Method to remove the note from firebase\n  removeNote = (noteKey) => {\n    const dbRef = firebase.database().ref();\n\n    dbRef.child(noteKey).remove();\n  }\n\n  render() {\n\n    return (\n      <div className=\"App\">\n\n        <Header />\n\n        <div className=\"bannerImg\">\n          <div className=\"bannerTextContainer\">\n            <div className=\"bannerText\">\n              <h2>Take notes during rehearsal and track your progress ♬</h2>\n            </div>\n          </div>\n        </div>\n\n        <main>\n\n          <div className=\"wrapper\">\n            <section className=\"newPracticeSession\">\n              <div className=\"formContainer\">\n                <form action=\"submit\">\n                  <label htmlFor=\"repList\">Repertoire</label>\n                  <textarea type=\"textarea\" name=\"repList\" id=\"repList\" placeholder=\"Enter repertoire details\"\n                    onChange={this.handleChange}\n                    value={this.state.repList}>\n                  </textarea>\n                  <label htmlFor=\"newNote\">Rehearsal Notes</label>\n                  <textarea type=\"textarea\" name=\"noteInput\" id=\"newNote\" placeholder=\"Enter rehearsal notes\"\n                    onChange={this.handleChange}\n                    value={this.state.noteInput}>\n                  </textarea>\n                  <button className=\"submitBtn\" onClick={this.handleClick}>Submit</button>\n                </form>\n              </div>\n            </section>\n          </div>\n\n          <div className=\"listContainer\">\n            <div className=\"wrapper\">\n              <ul>\n                {this.state.notes.map((note) => {\n                  return (\n                    <li key={note.key} className=\"border\">\n                      <div className=\"dateContainer\" onClick={(e) => this.minimizeNote(e, note.key)}>\n                        <h3><span>♫</span>{note.date}</h3>\n                        <button className=\"min iconMinus\"><FontAwesomeIcon icon={faMinus} /></button>\n                        <button className=\"iconDelete\" onClick={() => this.removeNote(note.key)}><FontAwesomeIcon icon={faTimes} /></button>\n                      </div>\n                      <div className=\"notesContainer\">\n                        <div className=\"repContainer\">\n                          <h4>Repertoire</h4>\n                          <p>{note.rep}</p>\n                        </div>\n                        <div className=\"noteContainer\">\n                          <h4>Notes</h4>\n                          <p>{note.note}</p>\n                        </div>\n                      </div>\n                    </li>\n                  )\n                })}\n              </ul>\n            </div>\n          </div>\n\n        </main>\n\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}